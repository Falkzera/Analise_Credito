
import streamlit as st
import pandas as pd
from utils.data_loader import load_roi_scenarios
from utils.charts import create_roi_timeline, COLORS
from utils.calculations import calculate_roi, format_currency, format_percentage


st.markdown('<h2 class="section-header">üí∞ Calculadora de ROI Interativa</h2>', 
            unsafe_allow_html=True)

# Cen√°rios pr√©-definidos
scenarios = load_roi_scenarios()

# Seletor de cen√°rio ou personalizado
st.markdown("### üéØ Escolha o Cen√°rio de An√°lise")

col1, col2 = st.columns([1, 2])

with col1:
    scenario_type = st.selectbox(
        "Tipo de Cen√°rio:",
        ["Personalizado", "Conservador", "Moderado", "Agressivo"],
        help="Selecione um cen√°rio pr√©-definido ou configure manualmente"
    )

with col2:
    if scenario_type != "Personalizado":
        scenario_map = {
            "Conservador": "Conservative",
            "Moderado": "Moderate", 
            "Agressivo": "Aggressive"
        }
        selected_scenario = scenarios[scenario_map[scenario_type]]
        
        st.info(f"""
        **Cen√°rio {scenario_type} Selecionado:**
        - Volume Mensal: {format_currency(selected_scenario['volume_mensal'])}
        - Taxa de Juros: {selected_scenario['taxa_juros']}%
        - Taxa de Inadimpl√™ncia Atual: {selected_scenario['taxa_inadimplencia_atual']}%
        - Redu√ß√£o Esperada: {selected_scenario['reducao_inadimplencia']}%
        """)

st.markdown("---")

# Formul√°rio de entrada
st.markdown("### ‚öôÔ∏è Configura√ß√µes do C√°lculo")

with st.form("roi_calculator"):
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if scenario_type == "Personalizado":
            volume_mensal = st.number_input(
                "Volume Mensal de Empr√©stimos (R$)",
                min_value=1_000_000,
                max_value=200_000_000,
                value=25_000_000,
                step=1_000_000,
                help="Volume total de empr√©stimos por m√™s"
            )
            
            taxa_juros = st.number_input(
                "Taxa de Juros Mensal (%)",
                min_value=0.5,
                max_value=10.0,
                value=3.0,
                step=0.1,
                help="Taxa de juros cobrada nos empr√©stimos"
            )
        else:
            selected = scenarios[scenario_map[scenario_type]]
            volume_mensal = selected['volume_mensal']
            taxa_juros = selected['taxa_juros']
            
            st.metric("Volume Mensal", format_currency(volume_mensal))
            st.metric("Taxa de Juros", f"{taxa_juros}%")
    
    with col2:
        if scenario_type == "Personalizado":
            taxa_inadimplencia = st.number_input(
                "Taxa de Inadimpl√™ncia Atual (%)",
                min_value=1.0,
                max_value=20.0,
                value=6.5,
                step=0.1,
                help="Taxa atual de inadimpl√™ncia da carteira"
            )
            
            reducao_inadimplencia = st.number_input(
                "Redu√ß√£o Esperada (%)",
                min_value=5.0,
                max_value=50.0,
                value=25.0,
                step=1.0,
                help="Redu√ß√£o percentual na inadimpl√™ncia com o modelo"
            )
        else:
            taxa_inadimplencia = selected['taxa_inadimplencia_atual']
            reducao_inadimplencia = selected['reducao_inadimplencia']
            
            st.metric("Taxa Inadimpl√™ncia Atual", f"{taxa_inadimplencia}%")
            st.metric("Redu√ß√£o Esperada", f"{reducao_inadimplencia}%")
    
    with col3:
        investimento_inicial = st.number_input(
            "Investimento Inicial (R$)",
            min_value=100_000,
            max_value=2_000_000,
            value=500_000,
            step=50_000,
            help="Custo de implementa√ß√£o do modelo"
        )
        
        periodo_analise = st.number_input(
            "Per√≠odo de An√°lise (meses)",
            min_value=6,
            max_value=36,
            value=12,
            step=1,
            help="Per√≠odo para c√°lculo do ROI"
        )
    
    # Bot√£o de c√°lculo
    calcular = st.form_submit_button("üöÄ Calcular ROI", use_container_width=True)

# C√°lculos e resultados
if calcular:
    # Realizando c√°lculos
    resultado = calculate_roi(
        volume_mensal=volume_mensal,
        taxa_juros=taxa_juros,
        taxa_inadimplencia_atual=taxa_inadimplencia,
        reducao_inadimplencia=reducao_inadimplencia,
        investimento_inicial=investimento_inicial,
        meses=periodo_analise
    )
    
    st.markdown("---")
    st.markdown("### üìä Resultados da An√°lise")
    
    # KPIs principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        roi_color = COLORS['success'] if resultado['roi_percentual'] > 0 else '#EF4444'
        st.metric(
            "ROI Total",
            f"{resultado['roi_percentual']:.1f}%",
            delta="Retorno sobre investimento",
            help=f"ROI em {periodo_analise} meses"
        )
    
    with col2:
        st.metric(
            "Economia Total",
            format_currency(resultado['economia_total']),
            delta="Redu√ß√£o de perdas",
            help="Economia total no per√≠odo"
        )
    
    with col3:
        st.metric(
            "Economia Mensal",
            format_currency(resultado['economia_mensal']),
            delta="Fluxo de caixa",
            help="Economia m√©dia por m√™s"
        )
    
    with col4:
        payback_text = f"{resultado['payback_meses']:.1f} meses" if resultado['payback_meses'] < 100 else "N/A"
        st.metric(
            "Payback",
            payback_text,
            delta="Tempo de retorno",
            help="Tempo para recuperar o investimento"
        )
    
    # Detalhamento dos c√°lculos
    st.markdown("---")
    st.markdown("### üîç Detalhamento dos C√°lculos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìà Cen√°rio Atual vs Novo Modelo")
        
        comparison_data = {
            'M√©trica': [
                'Volume Total',
                'Taxa de Inadimpl√™ncia',
                'Perdas Estimadas',
                'Investimento Modelo',
                'Resultado L√≠quido'
            ],
            'Cen√°rio Atual': [
                format_currency(resultado['volume_total']),
                f"{taxa_inadimplencia}%",
                format_currency(resultado['perdas_atuais']),
                "R$ 0,00",
                format_currency(-resultado['perdas_atuais'])
            ],
            'Com Novo Modelo': [
                format_currency(resultado['volume_total']),
                f"{resultado['nova_taxa_inadimplencia']:.1f}%",
                format_currency(resultado['perdas_com_modelo']),
                format_currency(investimento_inicial),
                format_currency(resultado['economia_total'] - investimento_inicial)
            ]
        }
        
        comparison_df = pd.DataFrame(comparison_data)
        st.dataframe(comparison_df, use_container_width=True, hide_index=True)
    
    with col2:
        st.markdown("#### üí° An√°lise de Sensibilidade")
        
        # An√°lise de sensibilidade simples
        scenarios_sensitivity = []
        for factor in [0.5, 0.75, 1.0, 1.25, 1.5]:
            roi_temp = calculate_roi(
                volume_mensal=volume_mensal,
                taxa_juros=taxa_juros,
                taxa_inadimplencia_atual=taxa_inadimplencia,
                reducao_inadimplencia=reducao_inadimplencia * factor,
                investimento_inicial=investimento_inicial,
                meses=periodo_analise
            )
            scenarios_sensitivity.append({
                'Cen√°rio': f"{factor*100:.0f}% da redu√ß√£o",
                'ROI': f"{roi_temp['roi_percentual']:.1f}%"
            })
        
        sensitivity_df = pd.DataFrame(scenarios_sensitivity)
        st.dataframe(sensitivity_df, use_container_width=True, hide_index=True)
        
        st.info("""
        **üí≠ An√°lise de Sensibilidade:**
        Mostra como o ROI varia conforme diferentes n√≠veis de efic√°cia do modelo.
        """)
    
    # Gr√°fico de timeline ROI
    st.markdown("---")
    st.markdown("### üìà Evolu√ß√£o do ROI ao Longo do Tempo")
    
    # Criando dados para timeline
    timeline_scenarios = {
        'Atual': {
            'volume_mensal': volume_mensal,
            'taxa_juros': taxa_juros,
            'taxa_inadimplencia_atual': taxa_inadimplencia,
            'reducao_inadimplencia': reducao_inadimplencia
        }
    }
    
    fig_timeline = create_roi_timeline(timeline_scenarios)
    st.plotly_chart(fig_timeline, use_container_width=True)
    
    # Insights e recomenda√ß√µes
    st.markdown("---")
    st.markdown("### üéØ Insights e Recomenda√ß√µes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if resultado['roi_percentual'] > 200:
            st.success(f"""
            **üöÄ ROI Excepcional ({resultado['roi_percentual']:.1f}%)**
            
            - Implementa√ß√£o altamente recomendada
            - Payback em {resultado['payback_meses']:.1f} meses
            - Economia de {format_currency(resultado['economia_mensal'])} por m√™s
            - Projeto priorit√°rio para execu√ß√£o
            """)
        elif resultado['roi_percentual'] > 50:
            st.info(f"""
            **‚úÖ ROI Positivo ({resultado['roi_percentual']:.1f}%)**
            
            - Implementa√ß√£o recomendada
            - Retorno adequado sobre o investimento
            - Redu√ß√£o significativa de perdas
            - Monitorar performance em produ√ß√£o
            """)
        else:
            st.warning(f"""
            **‚ö†Ô∏è ROI Baixo ({resultado['roi_percentual']:.1f}%)**
            
            - Revisar premissas do c√°lculo
            - Considerar otimiza√ß√µes do modelo
            - Avaliar redu√ß√£o de custos de implementa√ß√£o
            - Analisar cen√°rios alternativos
            """)
    
    with col2:
        st.markdown("#### üìã Pr√≥ximos Passos")
        
        if resultado['roi_percentual'] > 100:
            st.markdown("""
            **Implementa√ß√£o Imediata:**
            1. ‚úÖ Aprova√ß√£o executiva do projeto
            2. üîß Prepara√ß√£o da infraestrutura t√©cnica
            3. üë• Treinamento das equipes
            4. üìä Implementa√ß√£o piloto (10% da carteira)
            5. üìà Rollout completo em 3 meses
            """)
        else:
            st.markdown("""
            **An√°lise Adicional:**
            1. üîç Valida√ß√£o das premissas
            2. üìä An√°lise de cen√°rios alternativos
            3. üí∞ Otimiza√ß√£o de custos de implementa√ß√£o
            4. üéØ Refinamento do modelo
            5. üìà Reavalia√ß√£o ap√≥s melhorias
            """)
    
    # Exportar resultados
    st.markdown("---")
    
    # Dados para download
    export_data = {
        'M√©trica': ['ROI Total (%)', 'Economia Total (R$)', 'Economia Mensal (R$)', 
                    'Payback (meses)', 'Nova Taxa Inadimpl√™ncia (%)'],
        'Valor': [
            f"{resultado['roi_percentual']:.2f}",
            f"{resultado['economia_total']:.2f}",
            f"{resultado['economia_mensal']:.2f}",
            f"{resultado['payback_meses']:.2f}",
            f"{resultado['nova_taxa_inadimplencia']:.2f}"
        ]
    }
    
    export_df = pd.DataFrame(export_data)
    
    col1, col2 = st.columns(2)
    
    with col1:
        csv_data = export_df.to_csv(index=False)
        st.download_button(
            label="üì• Baixar Resultados (CSV)",
            data=csv_data,
            file_name=f"roi_analysis_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.csv",
            mime="text/csv",
            use_container_width=True
        )
    
    with col2:
        st.info("""
        **üí° Dica:**
        Use os resultados exportados para apresenta√ß√µes executivas e documenta√ß√£o do projeto.
        """)

# Cen√°rios de exemplo para demonstra√ß√£o

with st.expander("üìã Cen√°rios de Refer√™ncia"):
    st.markdown("""
    **Cen√°rio Conservador:**
    - Institui√ß√£o pequena/m√©dia
    - Volume: R$ 10M/m√™s
    - Taxa inadimpl√™ncia: 8%
    - Redu√ß√£o esperada: 15%
    
    **Cen√°rio Moderado:**
    - Institui√ß√£o m√©dia/grande
    - Volume: R$ 25M/m√™s  
    - Taxa inadimpl√™ncia: 6.5%
    - Redu√ß√£o esperada: 25%
    
    **Cen√°rio Agressivo:**
    - Institui√ß√£o grande
    - Volume: R$ 50M/m√™s
    - Taxa inadimpl√™ncia: 5%
    - Redu√ß√£o esperada: 35%
    """)

from utils.assets import custom_assets
custom_assets()

from utils.developer import rodape_desenvolvedor
rodape_desenvolvedor()