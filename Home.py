import streamlit as st
from PIL import Image

st.set_page_config(
    page_title="Power of Data - An√°lise de Risco de Cr√©dito",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)


import streamlit as st
import pandas as pd
from utils.charts import create_risk_gauge, COLORS
from utils.calculations import simulate_credit_risk, format_currency


st.markdown('<h2 class="section-header">üîç Simulador de Risco de Cr√©dito Individual</h2>', 
            unsafe_allow_html=True)

st.markdown("""
**Simule a an√°lise de risco para diferentes perfis de clientes usando o Threshold obtido atrav√©s da an√°lise do Modelo.**  
Insira os dados do cliente e veja a classifica√ß√£o de risco em tempo real.
""")

st.markdown("---")

# Formul√°rio de entrada de dados
st.markdown("### üìã Dados do Cliente")

with st.form("risk_analysis_form"):
    # Informa√ß√µes pessoais
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üë§ Informa√ß√µes Pessoais")
        
        idade = st.number_input(
            "Idade",
            min_value=18,
            max_value=80,
            value=35,
            help="Idade do solicitante"
        )
        
        renda_mensal = st.number_input(
            "Renda Mensal (R$)",
            min_value=1000,
            max_value=50000,
            value=5000,
            step=100,
            help="Renda mensal comprovada"
        )
        
        historico_credito = st.selectbox(
            "Hist√≥rico de Cr√©dito",
            ["Excelente", "Bom", "Regular", "Ruim"],
            index=1,
            help="Hist√≥rico de pagamentos e relacionamento com institui√ß√µes financeiras"
        )
    
    with col2:
        st.markdown("#### üí∞ Informa√ß√µes do Empr√©stimo")
        
        valor_emprestimo = st.number_input(
            "Valor do Empr√©stimo (R$)",
            min_value=1000,
            max_value=500000,
            value=25000,
            step=1000,
            help="Valor solicitado para o empr√©stimo"
        )
        
        finalidade_emprestimo = st.selectbox(
            "Finalidade do Empr√©stimo",
            [
                "Compra de ve√≠culo",
                "Reforma/constru√ß√£o", 
                "Consolida√ß√£o de d√≠vidas",
                "Capital de giro",
                "Outros"
            ],
            index=0,
            help="Principal finalidade do empr√©stimo"
        )
        
        # Calculando automaticamente a rela√ß√£o empr√©stimo/renda
        relacao_emprestimo_renda = valor_emprestimo / (renda_mensal * 12)
        
        st.metric(
            "Rela√ß√£o Empr√©stimo/Renda Anual",
            f"{relacao_emprestimo_renda:.1f}x",
            help="Quantas vezes a renda anual representa o valor do empr√©stimo"
        )
    
    # Bot√£o de an√°lise
    st.markdown("---")
    analisar = st.form_submit_button(
        "üîç Analisar Risco",
        use_container_width=True,
        type="primary"
    )

# Resultados da an√°lise
if analisar:
    # Executando simula√ß√£o
    resultado = simulate_credit_risk(
        idade=idade,
        renda_mensal=renda_mensal,
        valor_emprestimo=valor_emprestimo,
        historico_credito=historico_credito,
        finalidade_emprestimo=finalidade_emprestimo
    )
    
    st.markdown("---")
    st.markdown("### üìä Resultado da An√°lise")
    
    # Layout principal dos resultados
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Medidor de risco
        fig_gauge = create_risk_gauge(resultado['score'])
        st.plotly_chart(fig_gauge, use_container_width=True)
        
        # Score num√©rico
        st.metric(
            "Score de Risco",
            f"{resultado['score']:.3f}",
            help="Score entre 0 (menor risco) e 1 (maior risco)"
        )
    
    with col2:
        # Decis√£o principal
        if resultado['aprovado']:
            st.success(f"""
            ### ‚úÖ CR√âDITO APROVADO
            
            **Classifica√ß√£o:** {resultado['classificacao_risco']} Risco  
            **Confian√ßa:** {resultado['confianca']:.0f}%  
            **Motivo Principal:** {resultado['motivo_principal']}
            """)
        else:
            st.error(f"""
            ### ‚ùå CR√âDITO NEGADO
            
            **Classifica√ß√£o:** {resultado['classificacao_risco']} Risco  
            **Confian√ßa:** {resultado['confianca']:.0f}%  
            **Motivo Principal:** {resultado['motivo_principal']}
            """)
        
        # Informa√ß√µes adicionais
        st.info(f"""
        **Detalhes da An√°lise:**
        - Threshold do modelo: 0.0922
        - Score calculado: {resultado['score']:.4f}
        - Algoritmo: LightGBM com SMOTE
        """)
    
    st.markdown("---")
    
    # An√°lise detalhada dos fatores
    st.markdown("### üîç An√°lise Detalhada dos Fatores de Risco")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("#### üë§ Perfil Demogr√°fico")
        
        # An√°lise da idade
        if 25 <= idade <= 55:
            idade_status = "‚úÖ Faixa et√°ria de menor risco"
            idade_color = COLORS['success']
        else:
            idade_status = "‚ö†Ô∏è Faixa et√°ria de maior aten√ß√£o"
            idade_color = COLORS['warning']
        
        st.markdown(f"""
        **Idade:** {idade} anos  
        <span style="color: {idade_color};">{idade_status}</span>
        
        **Renda Mensal:** {format_currency(renda_mensal)}
        """, unsafe_allow_html=True)
        
        # Classifica√ß√£o da renda
        if renda_mensal >= 10000:
            renda_status = "‚úÖ Renda elevada - fator protetor"
        elif renda_mensal >= 5000:
            renda_status = "‚úÖ Renda adequada"
        else:
            renda_status = "‚ö†Ô∏è Renda baixa - maior aten√ß√£o"
        
        st.markdown(renda_status)
    
    with col2:
        st.markdown("#### üí≥ Hist√≥rico de Cr√©dito")
        
        # An√°lise do hist√≥rico
        historico_analysis = {
            'Excelente': ('‚úÖ Excelente hist√≥rico', COLORS['success'], 'Fator muito positivo'),
            'Bom': ('‚úÖ Bom hist√≥rico', COLORS['success'], 'Fator positivo'),
            'Regular': ('‚ö†Ô∏è Hist√≥rico regular', COLORS['warning'], 'Requer aten√ß√£o'),
            'Ruim': ('‚ùå Hist√≥rico negativo', '#EF4444', 'Fator de alto risco')
        }
        
        status, color, descricao = historico_analysis[historico_credito]
        
        st.markdown(f"""
        **Status:** <span style="color: {color};">{status}</span>  
        **Impacto:** {descricao}
        
        **Observa√ß√£o:** Hist√≥rico de pagamento √© a vari√°vel mais importante do modelo (85% de import√¢ncia).
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("#### üí∞ An√°lise Financeira")
        
        st.markdown(f"""
        **Valor Solicitado:** {format_currency(valor_emprestimo)}  
        **Finalidade:** {finalidade_emprestimo}  
        **Rela√ß√£o Empr√©stimo/Renda:** {relacao_emprestimo_renda:.1f}x
        """)
        
        # An√°lise da rela√ß√£o empr√©stimo/renda
        if relacao_emprestimo_renda > 5:
            relacao_status = "‚ùå Muito alto - risco elevado"
            relacao_color = '#EF4444'
        elif relacao_emprestimo_renda > 3:
            relacao_status = "‚ö†Ô∏è Alto - requer aten√ß√£o"
            relacao_color = COLORS['warning']
        elif relacao_emprestimo_renda < 1:
            relacao_status = "‚úÖ Baixo - fator protetor"
            relacao_color = COLORS['success']
        else:
            relacao_status = "‚úÖ Adequado"
            relacao_color = COLORS['success']
        
        st.markdown(f'<span style="color: {relacao_color};">{relacao_status}</span>', 
                    unsafe_allow_html=True)
    
    # Recomenda√ß√µes baseadas no resultado
    st.markdown("---")
    st.markdown("### üéØ Recomenda√ß√µes")
    
    if resultado['aprovado']:
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("""
            **‚úÖ Recomenda√ß√µes para Aprova√ß√£o:**
            
            1. **Prosseguir com aprova√ß√£o** conforme an√°lise
            2. **Monitorar** o comportamento de pagamento
            3. **Oferecer** produtos adicionais se apropriado
            4. **Revisar** periodicamente o perfil de risco
            """)
        
        with col2:
            st.info("""
            **üìã Condi√ß√µes Sugeridas:**
            
            - Taxa de juros padr√£o para o perfil
            - Prazo adequado √† capacidade de pagamento  
            - Possibilidade de refinanciamento futuro
            - Acompanhamento mensal inicial
            """)
    else:
        col1, col2 = st.columns(2)
        
        with col1:
            st.error("""
            **‚ùå Motivos para Nega√ß√£o:**
            
            1. **Score de risco** acima do threshold aceit√°vel
            2. **Hist√≥rico de cr√©dito** inadequado
            3. **Capacidade de pagamento** insuficiente
            4. **Rela√ß√£o empr√©stimo/renda** muito alta
            """)
        
        with col2:
            st.warning("""
            **üîÑ Alternativas Poss√≠veis:**
            
            - Reduzir o valor do empr√©stimo
            - Aguardar melhoria do hist√≥rico
            - Apresentar comprovante de renda adicional
            - Incluir avalista ou garantia real
            """)
    
    # Compara√ß√£o com outros perfis
    st.markdown("---")
    st.markdown("### üìä Compara√ß√£o com Outros Perfis")
    
    # Gerando perfis de compara√ß√£o
    perfis_comparacao = [
        {
            'nome': 'Perfil Baixo Risco',
            'idade': 40,
            'renda': 15000,
            'valor': 30000,
            'historico': 'Excelente',
            'finalidade': 'Compra de ve√≠culo'
        },
        {
            'nome': 'Perfil M√©dio Risco', 
            'idade': 28,
            'renda': 6000,
            'valor': 20000,
            'historico': 'Bom',
            'finalidade': 'Reforma/constru√ß√£o'
        },
        {
            'nome': 'Perfil Alto Risco',
            'idade': 22,
            'renda': 2500,
            'valor': 15000,
            'historico': 'Ruim',
            'finalidade': 'Consolida√ß√£o de d√≠vidas'
        }
    ]
    
    resultados_comparacao = []
    for perfil in perfis_comparacao:
        resultado_comp = simulate_credit_risk(
            idade=perfil['idade'],
            renda_mensal=perfil['renda'],
            valor_emprestimo=perfil['valor'],
            historico_credito=perfil['historico'],
            finalidade_emprestimo=perfil['finalidade']
        )
        resultados_comparacao.append({
            'Perfil': perfil['nome'],
            'Score': f"{resultado_comp['score']:.3f}",
            'Classifica√ß√£o': resultado_comp['classificacao_risco'],
            'Decis√£o': 'Aprovado' if resultado_comp['aprovado'] else 'Negado',
            'Renda': format_currency(perfil['renda']),
            'Valor': format_currency(perfil['valor'])
        })
    
    # Adicionando perfil atual
    resultados_comparacao.append({
        'Perfil': 'üë§ Seu Perfil',
        'Score': f"{resultado['score']:.3f}",
        'Classifica√ß√£o': resultado['classificacao_risco'],
        'Decis√£o': 'Aprovado' if resultado['aprovado'] else 'Negado',
        'Renda': format_currency(renda_mensal),
        'Valor': format_currency(valor_emprestimo)
    })
    
    df_comparacao = pd.DataFrame(resultados_comparacao)
    st.dataframe(df_comparacao, use_container_width=True, hide_index=True)
    
    # Observa√ß√µes finais
    with st.expander("‚ÑπÔ∏è Sobre o Modelo de An√°lise"):
        st.markdown("""
        **Threshold Obtido atrav√©s da an√°lise do Modelo- Especifica√ß√µes:**
        
        **Performance:**
        - AUC-ROC: 0.7163
        - Recall: 36% (detec√ß√£o de inadimplentes)
        - Threshold otimizado: 0.0922
        
        **Vari√°veis Mais Importantes:**
        1. Hist√≥rico de cr√©dito e pagamentos (85% import√¢ncia)
        2. Capacidade de pagamento e renda (68% import√¢ncia)  
        3. Rela√ß√£o empr√©stimo/renda (estimativa)
        4. Perfil demogr√°fico (48% import√¢ncia)
        
        **Limita√ß√µes:**
        - Simula√ß√£o baseada em vari√°veis limitadas
        - Modelo real utiliza 54 vari√°veis
        - Resultados para fins demonstrativos
        
        **Precis√£o:**
        - Modelo treinado com 20.000 registros
        - Valida√ß√£o em dataset de teste
        - Performance superior ao modelo base em 64%
        """)

from utils.assets import custom_assets
custom_assets()

from utils.developer import rodape_desenvolvedor
rodape_desenvolvedor()